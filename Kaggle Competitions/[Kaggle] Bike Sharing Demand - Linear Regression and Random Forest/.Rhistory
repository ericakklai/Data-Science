# 525 Final Project # kakilai2, tlu16# May 10, 2016# Effective MCMC Algorithm to sample Binary Matrices with Fixed Marginals rm(list = ls())library(eRm)#initializationdata(xmpl)x=xmpln= dim(x)[1]k = dim(x)[2]phi0 = phi.range(xmpl)# parametersR = 10 # number of replication for each step sizeburn = 100 # burning periodN = 100 # number of effective matrix to generate################# function for finding effective pair #################reg_pair = function(mat){  ret_mat = NULL  for (i in 1:(k-1)){    for (j in (i+1):k){      x = mat[,c(i,j)]      s = apply(x,1,sum)      idx = which(s == 1)      m = length(idx)      if (m > 1){        a = sum(x[idx,1] == 1)        if ((m>a)&(a>0)){          ret_mat = rbind(ret_mat,c(i,j)) }      }    }  }  ret_mat}################# function for generating all x ##################gen = function(x_list, stepsize){  for (steps in 1:(N*stepsize + burn)){        pair = reg_pair(x)    ridx = sample(1:nrow(pair),1)    sel = pair[ridx,]    x_ = x        while (sum(x_ == x) == 9000){      idx = which(apply(x[,sel],1,sum)==1)      x_[idx,sel] = x[sample(idx),sel]}            k1 = nrow(pair)    k2 = nrow(reg_pair(x_))        # step 2(b)    if (k2<=k1){       x = x_          }else{      # step 2(c)      u = runif(1,0,1)      if (u<1-k1/k2){         x = x_ }    }    if ((steps > burn) & (steps%%stepsize==0)){      x_list[[length(x_list)+1]] = x    }  }  return (x_list)}############################### program start here!##############################p_ = NULLp_std = NULLfor (ri in c(2,4,8,16,32)){ # list of step size  stepsize = ri  p = rep(0,R)  for (r in 1:R){    print (paste("stepsize",ri))    print (paste("run",r))    print (Sys.time())    x_list = list()    x_list[[1]]= x    x_list = gen(x_list, stepsize)        # phi coefficient    phi = rep(0,length(x_list))        # get the phi coefficient     for (i in (1:length(x_list))){      phi[i] = phi.range(x_list[[i]])    }    # calculate the p-value    p[r] = sum(phi>phi0)/length(phi)}    p_ = c(p_,mean(p)) # average p-value   p_std = c(p_std,sd(p)) # std error of pvalue  }
# 525 Final Project # kakilai2, tlu16# May 10, 2016# Effective MCMC Algorithm to sample Binary Matrices with Fixed Marginals rm(list = ls())library(eRm)#initializationdata(xmpl)x=xmpln= dim(x)[1]k = dim(x)[2]phi0 = phi.range(xmpl)# parametersR = 10 # number of replication for each step sizeburn = 100 # burning periodN = 100 # number of effective matrix to generate################# function for finding effective pair #################reg_pair = function(mat){  ret_mat = NULL  for (i in 1:(k-1)){    for (j in (i+1):k){      x = mat[,c(i,j)]      s = apply(x,1,sum)      idx = which(s == 1)      m = length(idx)      if (m > 1){        a = sum(x[idx,1] == 1)        if ((m>a)&(a>0)){          ret_mat = rbind(ret_mat,c(i,j)) }      }    }  }  ret_mat}################# function for generating all x ##################gen = function(x_list, stepsize){  for (steps in 1:(N*stepsize + burn)){        pair = reg_pair(x)    ridx = sample(1:nrow(pair),1)    sel = pair[ridx,]    x_ = x        while (sum(x_ == x) == 9000){      idx = which(apply(x[,sel],1,sum)==1)      x_[idx,sel] = x[sample(idx),sel]}            k1 = nrow(pair)    k2 = nrow(reg_pair(x_))        # step 2(b)    if (k2<=k1){       x = x_          }else{      # step 2(c)      u = runif(1,0,1)      if (u<1-k1/k2){         x = x_ }    }    if ((steps > burn) & (steps%%stepsize==0)){      x_list[[length(x_list)+1]] = x    }  }  return (x_list)}p_ = NULLp_std = NULLfor (ri in c(2,4,8,16,32)){ # list of step size  stepsize = ri  p = rep(0,R)  for (r in 1:R){    print (paste("stepsize",ri))    print (paste("run",r))    print (Sys.time())    x_list = list()    x_list[[1]]= x    x_list = gen(x_list, stepsize)        # phi coefficient    phi = rep(0,length(x_list))        # get the phi coefficient     for (i in (1:length(x_list))){      phi[i] = phi.range(x_list[[i]])    }    # calculate the p-value    p[r] = sum(phi>phi0)/length(phi)}    p_ = c(p_,mean(p)) # average p-value   p_std = c(p_std,sd(p)) # std error of pvalue  }
# 525 Final Project # kakilai2, tlu16# May 10, 2016# Effective MCMC Algorithm to sample Binary Matrices with Fixed Marginals rm(list = ls())library(eRm)#initializationdata(xmpl)x=xmpln= dim(x)[1]k = dim(x)[2]phi0 = phi.range(xmpl)# parametersR = 10 # number of replication for each step sizeburn = 100 # burning periodN = 100 # number of effective matrix to generate################# function for finding effective pair #################reg_pair = function(mat){  ret_mat = NULL  for (i in 1:(k-1)){    for (j in (i+1):k){      x = mat[,c(i,j)]      s = apply(x,1,sum)      idx = which(s == 1)      m = length(idx)      if (m > 1){        a = sum(x[idx,1] == 1)        if ((m>a)&(a>0)){          ret_mat = rbind(ret_mat,c(i,j)) }      }    }  }  ret_mat}################# function for generating all x ##################gen = function(x_list, stepsize){  for (steps in 1:(N*stepsize + burn)){        pair = reg_pair(x)    ridx = sample(1:nrow(pair),1)    sel = pair[ridx,]    x_ = x        while (sum(x_ == x) == 9000){      idx = which(apply(x[,sel],1,sum)==1)      x_[idx,sel] = x[sample(idx),sel]}            k1 = nrow(pair)    k2 = nrow(reg_pair(x_))        # step 2(b)    if (k2<=k1){       x = x_          }else{      # step 2(c)      u = runif(1,0,1)      if (u<1-k1/k2){         x = x_ }    }    if ((steps > burn) & (steps%%stepsize==0)){      x_list[[length(x_list)+1]] = x    }  }  return (x_list)}p_ = NULLp_std = NULLfor (ri in c(2,4,8,16,32)){ # list of step size  stepsize = ri  p = rep(0,R)  for (r in 1:R){    print (paste("stepsize",ri))    print (paste("run",r))    print (Sys.time())    x_list = list()    x_list[[1]]= x    x_list = gen(x_list, stepsize)        # phi coefficient    phi = rep(0,length(x_list))        # get the phi coefficient     for (i in (1:length(x_list))){      phi[i] = phi.range(x_list[[i]])    }    # calculate the p-value    p[r] = sum(phi>phi0)/length(phi)}    p_ = c(p_,mean(p)) # average p-value   p_std = c(p_std,sd(p))   }
# 525 final project Algo 3
rm(list = ls())
library(eRm)
#initialization
data(xmpl)
x=xmpl
n= dim(x)[1]
k = dim(x)[2]
phi0 = phi.range(xmpl)
# parameters
R = 10 # number of replication for each step size
burn = 100 # burning period
N = 100 # number of effective matrix to generate
################# function for finding effective pair #################
reg_pair = function(mat){
ret_mat = NULL
for (i in 1:(k-1)){
for (j in (i+1):k){
x = mat[,c(i,j)]
s = apply(x,1,sum)
idx = which(s == 1)
m = length(idx)
if (m > 1){
a = sum(x[idx,1] == 1)
if ((m>a)&(a>0)){
ret_mat = rbind(ret_mat,c(i,j)) }
}
}
}
ret_mat
}
################# function for generating all x ##################
gen = function(x_list, stepsize){
for (steps in 1:(N*stepsize + burn)){
pair = reg_pair(x)
ridx = sample(1:nrow(pair),1)
sel = pair[ridx,]
x_ = x
while (sum(x_ == x) == 9000){
idx = which(apply(x[,sel],1,sum)==1)
x_[idx,sel] = x[sample(idx),sel]}
k1 = nrow(pair)
k2 = nrow(reg_pair(x_))
# step 2(b)
if (k2<=k1){
x = x_
}else{
# step 2(c)
u = runif(1,0,1)
if (u<1-k1/k2){
x = x_ }
}
if ((steps > burn) & (steps%%stepsize==0)){
x_list[[length(x_list)+1]] = x
}
}
return (x_list)
}
############################### program start here!###################################
p_ = NULL
p_std = NULL
for (ri in c(2,4,8,16,32)){ # list of step size
stepsize = ri
p = rep(0,R)
for (r in 1:R){
print (paste("stepsize",ri))
print (paste("run",r))
print (Sys.time())
x_list = list()
x_list[[1]]= x
x_list = gen(x_list, stepsize)
# phi coefficient
phi = rep(0,length(x_list))
# get the phi coefficient
for (i in (1:length(x_list))){
phi[i] = phi.range(x_list[[i]])
}
# calculate the p-value
p[r] = sum(phi>phi0)/length(phi)}
p_ = c(p_,mean(p)) # average p-value
p_std = c(p_std,sd(p)) # std error of pvalue
}
